name: Release Helm chart
on:
  workflow_dispatch:

permissions:
  contents: read

env:
  CR_CONFIGFILE: "${{ github.workspace }}/source/.github/configs/cr.yaml"
  CT_CONFIGFILE: "${{ github.workspace }}/source/.github/configs/ct.yaml"
  CR_INDEX_PATH: "${{ github.workspace }}/.cr-index"
  CR_PACKAGE_PATH: "${{ github.workspace }}/.cr-release-packages"
  CR_TOOL_PATH: "${{ github.workspace }}/.cr-tool"
  CR_VERSION: "1.5.0"
jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      changed: ${{ steps.list-changed.outputs.changed }}
      chartpath: ${{ steps.list-changed.outputs.chartpath }}
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4
      with:
        fetch-depth: 0
        path: source
        persist-credentials: false

    - name: Validate Ref Name
      env:
        REF_NAME: ${{ github.ref_name }}
      run: |
        if ! echo "$REF_NAME" | grep -Eq '^[a-zA-Z0-9_.-]+$'; then
          echo "Error: Invalid ref name: $REF_NAME"
          exit 1
        fi
        echo "Ref name validated."

    - name: Install chart-testing
      uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b  # v2

    - name: List changed charts
      id: list-changed
      env:
        REF_NAME: ${{ github.ref_name }}
      run: |
        cd source

        latest_tag=$( if ! git describe --tags --abbrev=0 --match='helm-chart/*' 2> /dev/null ; then git rev-list --max-parents=0 --first-parent HEAD; fi )

        echo "Running: ct list-changed --config ${CT_CONFIGFILE} --since ${latest_tag} --target-branch ${REF_NAME}"
        changed=$(ct list-changed --config "${CT_CONFIGFILE}" --since "${latest_tag}" --target-branch "${REF_NAME}")
        echo "${changed}"

        num_changed=$(wc -l <<< ${changed})
        if [[ "${num_changed}" -gt "1" ]] ; then
          echo "More than one chart changed, exiting"
          exit 1
        fi
        if [[ -n "${changed}" ]]; then
          name=$(yq ".name" < ${changed}/Chart.yaml)
          version=$(yq ".version" < ${changed}/Chart.yaml)
          tagname="v${version}"

          if [ $(git tag -l "${tagname}") ]; then
            echo "Tag ${tagname} already exists, skipping release"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Releasing ${changed}"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "chartpath=${changed}" >> $GITHUB_OUTPUT
          fi
        else
          echo "No charts have changed, skipping release"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

  # Add a validation job to ensure chartpath is safe
  validate-path:
    needs: [setup]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.changed == 'true'
    outputs:
      chartpath: ${{ needs.setup.outputs.chartpath }}
    steps:
      - name: Validate Chart Path
        env:
          CHART_PATH: ${{ needs.setup.outputs.chartpath }}
        run: |
          if ! echo "$CHART_PATH" | grep -Eq '^[a-zA-Z0-9/_.-]+$'; then
            echo "Error: Invalid chart path: $CHART_PATH"
            exit 1
          fi
          echo "Chartpath validated."

      - name: Set validated chartpath
        id: safe-path
        run: echo "Proceeding with validated chartpath."

  release:
    needs: [validate-path]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      CHARTPATH: ${{ needs.validate-path.outputs.chartpath }}
    steps:
    - id: get-secrets
      uses: grafana/shared-workflows/actions/get-vault-secrets@4ea1476b297f17f388a7d9003ae28216c05bdb59  # main
      with:
        # Secrets placed in the ci/repo/grafana/<repo>/<path> path in Vault
        repo_secrets: |
          APP_ID=github-app:app-id
          PRIVATE_KEY=github-app:private-key

    - uses: actions/create-github-app-token@d72941d797fd3113feb6b93fd0dec494b13a2547  # v1
      id: app-token
      with:
        app-id: ${{ env.APP_ID }}
        private-key: ${{ env.PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}

    - name: Checkout
      uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4
      with:
        fetch-depth: 0
        path: source
        persist-credentials: false

    - name: Configure Git
      run: |
        cd source
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Checkout helm-charts
      uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4
      with:
        fetch-depth: 0
        repository: grafana/helm-charts
        path: helm-charts
        persist-credentials: false

    - name: Configure Git for helm-charts
      run: |
        cd helm-charts
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Set up Helm
      uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112  # v4

    # Use environment variables instead of template syntax
    - name: Process Chart
      id: process-chart
      run: |
        cd source

        description=$(yq ".description" < ${CHARTPATH}/Chart.yaml)
        name=$(yq ".name" < ${CHARTPATH}/Chart.yaml)
        version=$(yq ".version" < ${CHARTPATH}/Chart.yaml)

        echo "chartpath=${CHARTPATH}" >> $GITHUB_OUTPUT
        echo "desc=${description}" >> $GITHUB_OUTPUT
        echo "tagname=v${version}" >> $GITHUB_OUTPUT
        echo "packagename=${name}-${version}" >> $GITHUB_OUTPUT

    - name: Install CR tool
      run: |
        mkdir -p "${CR_TOOL_PATH}"
        mkdir -p "${CR_PACKAGE_PATH}"
        mkdir -p "${CR_INDEX_PATH}"
        curl -sSLo cr.tar.gz "https://github.com/helm/chart-releaser/releases/download/v${CR_VERSION}/chart-releaser_${CR_VERSION}_linux_amd64.tar.gz"
        tar -xzf cr.tar.gz -C "${CR_TOOL_PATH}"
        rm -f cr.tar.gz

    - name: Create Helm package
      env:
        CHART_OUT_PATH: ${{ steps.process-chart.outputs.chartpath }}
      run: |
        cd source
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo add minio https://charts.min.io

        "${CR_TOOL_PATH}/cr" package "${CHART_OUT_PATH}" --config "${CR_CONFIGFILE}" --package-path "${CR_PACKAGE_PATH}"

    - name: Make a release on this repo
      uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631  # v2
      with:
        name: ${{ steps.process-chart.outputs.tagname }}
        repository: grafana/meta-monitoring-chart
        tag_name: ${{ steps.process-chart.outputs.tagname }}
        token: ${{ steps.app-token.outputs.token }}
        generate_release_notes: true
        files: |
          ${{ env.CR_PACKAGE_PATH }}/${{ steps.process-chart.outputs.packagename }}.tgz

    # Note that this creates a release in grafana/helm-charts with a new tag.
    # The tag name in grafana/helm-charts is <package>-<version>, while the
    # tag name for grafana/meta-monitoring-chart is <version>.
    - name: Make release on Helm Charts
      uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631  # v2
      with:
        name: ${{ steps.process-chart.outputs.packagename }}
        repository: grafana/helm-charts
        tag_name: ${{ steps.process-chart.outputs.packagename }}
        token: ${{ steps.app-token.outputs.token }}
        body: |
          ${{ steps.process-chart.outputs.desc }}

          Source commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}

          Tag on source: https://github.com/${{ github.repository }}/releases/tag/${{ steps.process-chart.outputs.tagname }}
        files: |
          ${{ env.CR_PACKAGE_PATH }}/${{ steps.process-chart.outputs.packagename }}.tgz

    - name: Update helm-charts index
      env:
        APP_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        cd helm-charts

        "${CR_TOOL_PATH}/cr" index --config "${CR_CONFIGFILE}" --token "${APP_TOKEN}" --index-path "${CR_INDEX_PATH}" --package-path "${CR_PACKAGE_PATH}" --push
